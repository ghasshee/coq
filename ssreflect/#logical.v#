From mathcomp
  Require Import ssreflect.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive. 

Section Logic. 

Lemma contrap : forall A B : Prop, (A -> B) -> (~B -> ~A).

Proof.
rewrite /not.
move => AO BO AtoB notB. (* assign the proposition types to variables *)
by move /AtoB. (* move AO â†¦ BO then the top is Bo -> False , this is notB *) 
Qed.



Variables A B C : Prop .

Lemma AndOrDistL : (A /\ C) \/ (B /\ C) <-> (A \/ B) /\ C.

Proof. 
rewrite /iff.
apply: conj.
-case.
 +case. move => AisTrue CisTrue.
  by apply: conj; [apply: or_introl | ].    (* or_introl : A \/ B -> A *) 
 +case=> BisTrue CisTrue.
  by apply: conj; [apply: or_intror | ].    (* or_intror : A \/ B -> B *)
-case=> AorBisTrue CisTrue.
  case: AorBisTrue => [ AisTrue | BisTrue ].
  +by apply: or_introl.
  +by apply: or_intror.
Qed.


(*
  Inductive and (A B:Prop) : Prop :=
    conj : A -> B -> A /\ B

  Inductive or (A B: Prop) : Prop :=
    | or_introl : A -> A \/ B
    | or_intror : B -> A \/ B

  ( case => )  === ( case. move => ) 
*)

Lemma JDM (T : Type) (P : T -> Prop):
  ~(exists (x:T), P x)  <-> forall x, ~(P x).

Proof.
(* rewrite /iff. *)
apply: conj => Hyp.
-move=> x0 HPx0.
  apply: Hyp.
  by apply: (ex_intro P x0).
-by case.
Qed.



(* 
  Inductive ex (A:Type) (P:A -> Prop) : Prop :=
    ex_intro : forall x:A, P x -> ex (A := A) P .
*)

Hypothesis ExMidLaw : forall P : Prop, P \/ ~ P.

Lemma notnotEq (P: Prop) : ~~P -> P.

Proof. 

move => HnotnotP.hib
-case: (ExMidLaw (~P)).
  +by move /HnotnotP.
  +by case: (ExMidLaw P).










